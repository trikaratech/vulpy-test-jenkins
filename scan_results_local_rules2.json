{
    "errors": [],
    "interfile_languages_used": [],
    "paths": {
        "scanned": [".gitignore", "LICENSE", "README.rst", "bad/.gitignore", "bad/api_list.py", "bad/api_post.py", "bad/brute.py", "bad/csp.txt", "bad/db.py", "bad/db_init.py", "bad/libapi.py", "bad/libmfa.py", "bad/libposts.py", "bad/libsession.py", "bad/libuser.py", "bad/mod_api.py", "bad/mod_csp.py", "bad/mod_hello.py", "bad/mod_mfa.py", "bad/mod_posts.py", "bad/mod_user.py", "bad/payloads/cookie.js", "bad/payloads/hello.html", "bad/payloads/keylogger.js", "bad/static/background.png", "bad/static/background.xcf", "bad/static/font-awesome.min.css", "bad/static/w3.css", "bad/templates/csp.html", "bad/templates/footer.html", "bad/templates/head.html", "bad/templates/messages.html", "bad/templates/mfa.disable.html", "bad/templates/mfa.enable.html", "bad/templates/navbar.html", "bad/templates/posts.view.html", "bad/templates/user.chpasswd.html", "bad/templates/user.create.html", "bad/templates/user.login.html", "bad/templates/user.login.mfa.html", "bad/templates/welcome.html", "bad/vulpy-ssl.py", "bad/vulpy.py", "good/.gitignore", "good/bad-passwords.txt", "good/csp.txt", "good/cutpasswd.py", "good/db_init.py", "good/httpbrute.py", "good/leaked_passwords.txt", "good/libapi.py", "good/libmfa.py", "good/libposts.py", "good/libsession.py", "good/libuser.py", "good/mod_api.py", "good/mod_csp.py", "good/mod_hello.py", "good/mod_mfa.py", "good/mod_posts.py", "good/mod_user.py", "good/mod_welcome1.py", "good/payloads/cookie.js", "good/payloads/hello.html", "good/payloads/keylogger.js", "good/static/background.png", "good/static/background.xcf", "good/static/font-awesome.min.css", "good/static/w3.css", "good/templates/csp.html", "good/templates/footer.html", "good/templates/head.html", "good/templates/messages.html", "good/templates/mfa.disable.html", "good/templates/mfa.enable.html", "good/templates/navbar.html", "good/templates/posts.view.html", "good/templates/user.chpasswd.html", "good/templates/user.create.html", "good/templates/user.login.html", "good/templates/user.login.mfa.html", "good/templates/welcome.html", "good/vulpy-ssl.py", "good/vulpy.py", "install-on-kali.sh", "owasp-asvs-4.0.csv", "requirements.txt", "scan_results_local_rules.json", "utils/aes-decrypt.py", "utils/aes-encrypt.py", "utils/ca-create.py", "utils/ca-csr-create.py", "utils/ca-csr-load.py", "utils/crack-cvv.py", "utils/crack-hash.py", "utils/fernet-generate-key.py", "utils/generate_bad_passwords.py", "utils/hashfile.py", "utils/hmac_generate.py", "utils/httpbrute.py", "utils/luncheck.py", "utils/passwords.txt", "utils/rsa-decrypt.py", "utils/rsa-encrypt.py", "utils/rsa-keygen.py", "utils/rsa-sign.py", "utils/rsa-verify.py", "utils/scrypt-crack.py", "utils/scrypt-generate.py", "utils/scrypt-verify.py", "utils/skey.py"]
    },
    "results": [{
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.requests.best-practice.use-timeout",
        "end": {
            "col": 75,
            "line": 10,
            "offset": 206
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "e2adeccccd8ef68c257fb790f69b8b2c62ddc14ad95797110d50e7420a84361ace50625ca034ff7b1b9ac6afd058a3e0b0cbaac6719a10d2a2a224ba8578a08f_0",
            "fix": "requests.get('http://127.0.1.1:5000/api/post/{}'.format(username), timeout=30)",
            "is_ignored": false,
            "lines": "    r = requests.get('http://127.0.1.1:5000/api/post/{}'.format(username))",
            "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],
                "technology": ["requests"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/api_list.py",
        "start": {
            "col": 9,
            "line": 10,
            "offset": 140
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.insecure-transport.requests.request-with-http",
        "end": {
            "col": 74,
            "line": 10,
            "offset": 205
        },
        "extra": {
            "dataflow_trace": {
                "intermediate_vars": [],
                "taint_sink": ["CliLoc", [{
                    "end": {
                        "col": 74,
                        "line": 10,
                        "offset": 205
                    },
                    "path": "bad/api_list.py",
                    "start": {
                        "col": 22,
                        "line": 10,
                        "offset": 153
                    }
                }, "'http://127.0.1.1:5000/api/post/{}'.format(username)"]],
                "taint_source": ["CliLoc", [{
                    "end": {
                        "col": 57,
                        "line": 10,
                        "offset": 188
                    },
                    "path": "bad/api_list.py",
                    "start": {
                        "col": 22,
                        "line": 10,
                        "offset": 153
                    }
                }, "'http://127.0.1.1:5000/api/post/{}'"]]
            },
            "engine_kind": "OSS",
            "fingerprint": "7a2392a8c4a264d384b9bab432d98bc4844befe47d240e537973940c77c43be7d7a879c1abac6afe79f0ecf895d27ea69120c7712b20b691cf027b4996e52082_0",
            "is_ignored": false,
            "lines": "    r = requests.get('http://127.0.1.1:5000/api/post/{}'.format(username))",
            "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.",
            "metadata": {
                "asvs": {
                    "control_id": "9.1.1 Weak TLS",
                    "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
                    "section": "V9 Communications Verification Requirements",
                    "version": "4"
                },
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"],
                "impact": "LOW",
                "likelihood": "LOW",
                "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"],
                "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],
                "subcategory": ["audit"],
                "technology": ["requests"]
            },
            "metavars": {
                "$SINK": {
                    "abstract_content": "'http://127.0.1.1:5000/api/post/{}'.format(username)",
                    "end": {
                        "col": 74,
                        "line": 10,
                        "offset": 205
                    },
                    "start": {
                        "col": 22,
                        "line": 10,
                        "offset": 153
                    }
                },
                "$URL": {
                    "abstract_content": "http://127.0.1.1:5000/api/post/{}",
                    "end": {
                        "col": 56,
                        "line": 10,
                        "offset": 187
                    },
                    "start": {
                        "col": 23,
                        "line": 10,
                        "offset": 154
                    }
                },
                "$W": {
                    "abstract_content": "get",
                    "end": {
                        "col": 21,
                        "line": 10,
                        "offset": 152
                    },
                    "start": {
                        "col": 18,
                        "line": 10,
                        "offset": 149
                    }
                }
            },
            "severity": "INFO",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/api_list.py",
        "start": {
            "col": 22,
            "line": 10,
            "offset": 153
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.requests.best-practice.use-timeout",
        "end": {
            "col": 108,
            "line": 16,
            "offset": 422
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "13e151c3295f68445d8bf7438969b83c86ca38668c004e42979bf7ffcccb5c75e62b5bdf0d695e4a8b8a8b59c52a430993c576a45795878711a66ca2ef69a837_0",
            "fix": "requests.post('http://127.0.1.1:5000/api/key', json={'username':username, 'password':password}, timeout=30)",
            "is_ignored": false,
            "lines": "        r = requests.post('http://127.0.1.1:5000/api/key', json={'username':username, 'password':password})",
            "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],
                "technology": ["requests"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/api_post.py",
        "start": {
            "col": 13,
            "line": 16,
            "offset": 327
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.insecure-transport.requests.request-with-http",
        "end": {
            "col": 58,
            "line": 16,
            "offset": 372
        },
        "extra": {
            "dataflow_trace": {
                "intermediate_vars": [],
                "taint_sink": ["CliLoc", [{
                    "end": {
                        "col": 58,
                        "line": 16,
                        "offset": 372
                    },
                    "path": "bad/api_post.py",
                    "start": {
                        "col": 27,
                        "line": 16,
                        "offset": 341
                    }
                }, "'http://127.0.1.1:5000/api/key'"]],
                "taint_source": ["CliLoc", [{
                    "end": {
                        "col": 58,
                        "line": 16,
                        "offset": 372
                    },
                    "path": "bad/api_post.py",
                    "start": {
                        "col": 27,
                        "line": 16,
                        "offset": 341
                    }
                }, "'http://127.0.1.1:5000/api/key'"]]
            },
            "engine_kind": "OSS",
            "fingerprint": "a5d9dae8029ce4939d7bec075a758dd236de14c1f0d58a8bbbd84d3f2f6319ed262844c8f7b8c2cd5d5fea3362d277e7d93204ede8cb473d67f394a4ca6b3cc1_0",
            "is_ignored": false,
            "lines": "        r = requests.post('http://127.0.1.1:5000/api/key', json={'username':username, 'password':password})",
            "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.",
            "metadata": {
                "asvs": {
                    "control_id": "9.1.1 Weak TLS",
                    "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
                    "section": "V9 Communications Verification Requirements",
                    "version": "4"
                },
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"],
                "impact": "LOW",
                "likelihood": "LOW",
                "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"],
                "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],
                "subcategory": ["audit"],
                "technology": ["requests"]
            },
            "metavars": {
                "$SINK": {
                    "abstract_content": "'http://127.0.1.1:5000/api/key'",
                    "end": {
                        "col": 58,
                        "line": 16,
                        "offset": 372
                    },
                    "start": {
                        "col": 27,
                        "line": 16,
                        "offset": 341
                    }
                },
                "$URL": {
                    "abstract_content": "http://127.0.1.1:5000/api/key",
                    "end": {
                        "col": 57,
                        "line": 16,
                        "offset": 371
                    },
                    "start": {
                        "col": 28,
                        "line": 16,
                        "offset": 342
                    }
                },
                "$W": {
                    "abstract_content": "post",
                    "end": {
                        "col": 26,
                        "line": 16,
                        "offset": 340
                    },
                    "start": {
                        "col": 22,
                        "line": 16,
                        "offset": 336
                    }
                }
            },
            "severity": "INFO",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/api_post.py",
        "start": {
            "col": 27,
            "line": 16,
            "offset": 341
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.requests.best-practice.use-raise-for-status",
        "end": {
            "col": 110,
            "line": 30,
            "offset": 904
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "14fb23265b88286853eb61134a7dcebf5362a81d4f880ed8d3b0177a118b8ff845deaf5c99445d0464aee847b1acd5ee97b4fa8d61a11e9a7c1bd7de9f13b925_0",
            "is_ignored": false,
            "lines": "    r = requests.post('http://127.0.1.1:5000/api/post', json={'text':message}, headers={'X-APIKEY': api_key})",
            "message": "There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],
                "technology": ["requests"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/api_post.py",
        "start": {
            "col": 9,
            "line": 30,
            "offset": 803
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.requests.best-practice.use-timeout",
        "end": {
            "col": 110,
            "line": 30,
            "offset": 904
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "13e151c3295f68445d8bf7438969b83c86ca38668c004e42979bf7ffcccb5c75e62b5bdf0d695e4a8b8a8b59c52a430993c576a45795878711a66ca2ef69a837_1",
            "fix": "requests.post('http://127.0.1.1:5000/api/post', json={'text':message}, headers={'X-APIKEY': api_key}, timeout=30)",
            "is_ignored": false,
            "lines": "    r = requests.post('http://127.0.1.1:5000/api/post', json={'text':message}, headers={'X-APIKEY': api_key})",
            "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],
                "technology": ["requests"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/api_post.py",
        "start": {
            "col": 9,
            "line": 30,
            "offset": 803
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.insecure-transport.requests.request-with-http",
        "end": {
            "col": 55,
            "line": 30,
            "offset": 849
        },
        "extra": {
            "dataflow_trace": {
                "intermediate_vars": [],
                "taint_sink": ["CliLoc", [{
                    "end": {
                        "col": 55,
                        "line": 30,
                        "offset": 849
                    },
                    "path": "bad/api_post.py",
                    "start": {
                        "col": 23,
                        "line": 30,
                        "offset": 817
                    }
                }, "'http://127.0.1.1:5000/api/post'"]],
                "taint_source": ["CliLoc", [{
                    "end": {
                        "col": 55,
                        "line": 30,
                        "offset": 849
                    },
                    "path": "bad/api_post.py",
                    "start": {
                        "col": 23,
                        "line": 30,
                        "offset": 817
                    }
                }, "'http://127.0.1.1:5000/api/post'"]]
            },
            "engine_kind": "OSS",
            "fingerprint": "b1bf0866d0fab2dd45223f215974dae7747b0ac2fc7299bc84c7a747a636255a6795b286d81015b02b44d04bb63a92ec40d3c161ddaa08451e9cb8a3016ef3cf_0",
            "is_ignored": false,
            "lines": "    r = requests.post('http://127.0.1.1:5000/api/post', json={'text':message}, headers={'X-APIKEY': api_key})",
            "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.",
            "metadata": {
                "asvs": {
                    "control_id": "9.1.1 Weak TLS",
                    "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
                    "section": "V9 Communications Verification Requirements",
                    "version": "4"
                },
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"],
                "impact": "LOW",
                "likelihood": "LOW",
                "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"],
                "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],
                "subcategory": ["audit"],
                "technology": ["requests"]
            },
            "metavars": {
                "$SINK": {
                    "abstract_content": "'http://127.0.1.1:5000/api/post'",
                    "end": {
                        "col": 55,
                        "line": 30,
                        "offset": 849
                    },
                    "start": {
                        "col": 23,
                        "line": 30,
                        "offset": 817
                    }
                },
                "$URL": {
                    "abstract_content": "http://127.0.1.1:5000/api/post",
                    "end": {
                        "col": 54,
                        "line": 30,
                        "offset": 848
                    },
                    "start": {
                        "col": 24,
                        "line": 30,
                        "offset": 818
                    }
                },
                "$W": {
                    "abstract_content": "post",
                    "end": {
                        "col": 22,
                        "line": 30,
                        "offset": 816
                    },
                    "start": {
                        "col": 18,
                        "line": 30,
                        "offset": 812
                    }
                }
            },
            "severity": "INFO",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/api_post.py",
        "start": {
            "col": 23,
            "line": 30,
            "offset": 817
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.dangerous-subprocess-use-audit",
        "end": {
            "col": 86,
            "line": 21,
            "offset": 331
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "3cf71b0617f19a3aff53547c833f3b5f41664057fc164060d3da42e6d15a24587c9b6533b0c601f1be9f52832b0749469f312900b0fc8ebe47c6801c3fc77d97_0",
            "is_ignored": false,
            "lines": "    result = subprocess.run([program, username, password], stdout=subprocess.DEVNULL)",
            "message": "Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.",
            "metadata": {
                "asvs": {
                    "control_id": "5.3.8 OS Command Injection",
                    "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                    "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                    "version": "4"
                },
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],
                "subcategory": ["audit"],
                "technology": ["python"]
            },
            "metavars": {
                "$FUNC": {
                    "abstract_content": "run",
                    "end": {
                        "col": 28,
                        "line": 21,
                        "offset": 273
                    },
                    "start": {
                        "col": 25,
                        "line": 21,
                        "offset": 270
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/brute.py",
        "start": {
            "col": 14,
            "line": 21,
            "offset": 259
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.dangerous-subprocess-use-tainted-env-args",
        "end": {
            "col": 58,
            "line": 21,
            "offset": 303
        },
        "extra": {
            "dataflow_trace": {
                "intermediate_vars": [{
                    "content": "program",
                    "location": {
                        "end": {
                            "col": 8,
                            "line": 6,
                            "offset": 61
                        },
                        "path": "bad/brute.py",
                        "start": {
                            "col": 1,
                            "line": 6,
                            "offset": 54
                        }
                    }
                }, {
                    "content": "program",
                    "location": {
                        "end": {
                            "col": 8,
                            "line": 6,
                            "offset": 61
                        },
                        "path": "bad/brute.py",
                        "start": {
                            "col": 1,
                            "line": 6,
                            "offset": 54
                        }
                    }
                }],
                "taint_sink": ["CliLoc", [{
                    "end": {
                        "col": 58,
                        "line": 21,
                        "offset": 303
                    },
                    "path": "bad/brute.py",
                    "start": {
                        "col": 29,
                        "line": 21,
                        "offset": 274
                    }
                }, "[program, username, password]"]],
                "taint_source": ["CliLoc", [{
                    "end": {
                        "col": 19,
                        "line": 6,
                        "offset": 72
                    },
                    "path": "bad/brute.py",
                    "start": {
                        "col": 11,
                        "line": 6,
                        "offset": 64
                    }
                }, "sys.argv"]]
            },
            "engine_kind": "OSS",
            "fingerprint": "155fb0af1afca2dc4008e67b68cdc01b562f86d4a539d40f263544dbcb6175c1018fc567794c5f99e0d59de7022b2004da0126b6e214805e652a8619da06f747_0",
            "is_ignored": false,
            "lines": "    result = subprocess.run([program, username, password], stdout=subprocess.DEVNULL)",
            "message": "Detected subprocess function 'run' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.",
            "metadata": {
                "asvs": {
                    "control_id": "5.3.8 OS Command Injection",
                    "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                    "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                    "version": "4"
                },
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],
                "subcategory": ["vuln"],
                "technology": ["python"]
            },
            "metavars": {
                "$CMD": {
                    "abstract_content": "[program username password]",
                    "end": {
                        "col": 58,
                        "line": 21,
                        "offset": 303
                    },
                    "start": {
                        "col": 29,
                        "line": 21,
                        "offset": 274
                    }
                },
                "$FUNC": {
                    "abstract_content": "run",
                    "end": {
                        "col": 28,
                        "line": 21,
                        "offset": 273
                    },
                    "start": {
                        "col": 25,
                        "line": 21,
                        "offset": 270
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/brute.py",
        "start": {
            "col": 29,
            "line": 21,
            "offset": 274
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.formatted-sql-query",
        "end": {
            "col": 103,
            "line": 19,
            "offset": 549
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "f63203610f002df7b8482a47a499ca6c9ba0e061318af3067e969b0bb3f90275914ad1d4352aeeaf1acefc22ab13c526f97209277b0aeb73117e839cf122a8f7_0",
            "is_ignored": false,
            "lines": "        c.execute(\"INSERT INTO users (user, password, failures) VALUES ('%s', '%s', '%d')\" %(u, p, 0))",
            "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],
                "subcategory": ["audit"],
                "technology": ["python"]
            },
            "metavars": {
                "$DB": {
                    "abstract_content": "c",
                    "end": {
                        "col": 10,
                        "line": 19,
                        "offset": 456
                    },
                    "start": {
                        "col": 9,
                        "line": 19,
                        "offset": 455
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/db.py",
        "start": {
            "col": 9,
            "line": 19,
            "offset": 455
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query",
        "end": {
            "col": 103,
            "line": 19,
            "offset": 549
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "add1a5eb71918c6fcae73c1935c35c6fcfad815591443bc01e9c35a422e72d6c550bd3289a356d53abbec4b50490d04cf1b14c5bd2702c9010c8ac7af4f01b1b_0",
            "is_ignored": false,
            "lines": "        c.execute(\"INSERT INTO users (user, password, failures) VALUES ('%s', '%s', '%d')\" %(u, p, 0))",
            "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],
                "subcategory": ["audit"],
                "technology": ["sqlalchemy"]
            },
            "metavars": {
                "$CONNECTION": {
                    "abstract_content": "c",
                    "end": {
                        "col": 10,
                        "line": 19,
                        "offset": 456
                    },
                    "start": {
                        "col": 9,
                        "line": 19,
                        "offset": 455
                    }
                },
                "$SQL": {
                    "abstract_content": "\"INSERT INTO users (user, password, failures) VALUES ('%s', '%s', '%d')\"",
                    "end": {
                        "col": 91,
                        "line": 19,
                        "offset": 537
                    },
                    "start": {
                        "col": 19,
                        "line": 19,
                        "offset": 465
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/db.py",
        "start": {
            "col": 9,
            "line": 19,
            "offset": 455
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.formatted-sql-query",
        "end": {
            "col": 151,
            "line": 20,
            "offset": 545
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "46814178377d553c1cc6ce8f7bb07d4c5d20f6be996fe672b6655590fa2d267b8f8c92975e93a820a9efec058229bd2af90d5d6bef3188327f5034eb1b4e0a56_0",
            "is_ignored": false,
            "lines": "        c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(u, p, 0, 0, ''))",
            "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],
                "subcategory": ["audit"],
                "technology": ["python"]
            },
            "metavars": {
                "$DB": {
                    "abstract_content": "c",
                    "end": {
                        "col": 10,
                        "line": 20,
                        "offset": 404
                    },
                    "start": {
                        "col": 9,
                        "line": 20,
                        "offset": 403
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/db_init.py",
        "start": {
            "col": 9,
            "line": 20,
            "offset": 403
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query",
        "end": {
            "col": 151,
            "line": 20,
            "offset": 545
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "f8c7aed676dd2636844bfb0eaafbe39d40fe7817b31ad1965c5042a53b6c991f4cbb8a3073ce296974d92ea55ffd8844cc319b6f904a1b6b91e917c51e562157_0",
            "is_ignored": false,
            "lines": "        c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(u, p, 0, 0, ''))",
            "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],
                "subcategory": ["audit"],
                "technology": ["sqlalchemy"]
            },
            "metavars": {
                "$CONNECTION": {
                    "abstract_content": "c",
                    "end": {
                        "col": 10,
                        "line": 20,
                        "offset": 404
                    },
                    "start": {
                        "col": 9,
                        "line": 20,
                        "offset": 403
                    }
                },
                "$SQL": {
                    "abstract_content": "\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\"",
                    "end": {
                        "col": 132,
                        "line": 20,
                        "offset": 526
                    },
                    "start": {
                        "col": 19,
                        "line": 20,
                        "offset": 413
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/db_init.py",
        "start": {
            "col": 9,
            "line": 20,
            "offset": 403
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.formatted-sql-query",
        "end": {
            "col": 113,
            "line": 12,
            "offset": 315
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "215f2754dce47faa771d17123348cdd31d14a19598d2b79e84a311aac6c627d2487235b8288698499a4b8ba734d06d97d0aba286e1bf9a6418330981a9751279_0",
            "is_ignored": false,
            "lines": "    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()",
            "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],
                "subcategory": ["audit"],
                "technology": ["python"]
            },
            "metavars": {
                "$DB": {
                    "abstract_content": "c",
                    "end": {
                        "col": 13,
                        "line": 12,
                        "offset": 215
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "conn.cursor()",
                        "svalue_end": {
                            "col": 22,
                            "line": 10,
                            "offset": 201
                        },
                        "svalue_start": {
                            "col": 9,
                            "line": 10,
                            "offset": 188
                        }
                    },
                    "start": {
                        "col": 12,
                        "line": 12,
                        "offset": 214
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/libuser.py",
        "start": {
            "col": 12,
            "line": 12,
            "offset": 214
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query",
        "end": {
            "col": 113,
            "line": 12,
            "offset": 315
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "86864f0c61f1a06b891324e3fe763914a1a7e4717dc1d097d3c1496501f26f75bc9860bb23150cc978d3196d9c0fe1d0895d4fbf4e135db6dfdcb0518e15712f_0",
            "is_ignored": false,
            "lines": "    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()",
            "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],
                "subcategory": ["audit"],
                "technology": ["sqlalchemy"]
            },
            "metavars": {
                "$CONNECTION": {
                    "abstract_content": "c",
                    "end": {
                        "col": 13,
                        "line": 12,
                        "offset": 215
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "conn.cursor()",
                        "svalue_end": {
                            "col": 22,
                            "line": 10,
                            "offset": 201
                        },
                        "svalue_start": {
                            "col": 9,
                            "line": 10,
                            "offset": 188
                        }
                    },
                    "start": {
                        "col": 12,
                        "line": 12,
                        "offset": 214
                    }
                },
                "$SQL": {
                    "abstract_content": "\"SELECT * FROM users WHERE username = '{}' and password = '{}'\"",
                    "end": {
                        "col": 85,
                        "line": 12,
                        "offset": 287
                    },
                    "start": {
                        "col": 22,
                        "line": 12,
                        "offset": 224
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/libuser.py",
        "start": {
            "col": 12,
            "line": 12,
            "offset": 214
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.formatted-sql-query",
        "end": {
            "col": 161,
            "line": 25,
            "offset": 668
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "215f2754dce47faa771d17123348cdd31d14a19598d2b79e84a311aac6c627d2487235b8288698499a4b8ba734d06d97d0aba286e1bf9a6418330981a9751279_1",
            "is_ignored": false,
            "lines": "    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))",
            "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],
                "subcategory": ["audit"],
                "technology": ["python"]
            },
            "metavars": {
                "$DB": {
                    "abstract_content": "c",
                    "end": {
                        "col": 6,
                        "line": 25,
                        "offset": 513
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "conn.cursor()",
                        "svalue_end": {
                            "col": 22,
                            "line": 23,
                            "offset": 506
                        },
                        "svalue_start": {
                            "col": 9,
                            "line": 23,
                            "offset": 493
                        }
                    },
                    "start": {
                        "col": 5,
                        "line": 25,
                        "offset": 512
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/libuser.py",
        "start": {
            "col": 5,
            "line": 25,
            "offset": 512
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query",
        "end": {
            "col": 161,
            "line": 25,
            "offset": 668
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "fab28819e260d68eeb10a3f81d5515c82cf238bdcc2de3162a7b534815491fd97c98c1a20f3034fc5f8aac8ffb53f9d76c78f6fb70abc0953f36859ba3441da1_0",
            "is_ignored": false,
            "lines": "    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))",
            "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],
                "subcategory": ["audit"],
                "technology": ["sqlalchemy"]
            },
            "metavars": {
                "$CONNECTION": {
                    "abstract_content": "c",
                    "end": {
                        "col": 6,
                        "line": 25,
                        "offset": 513
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "conn.cursor()",
                        "svalue_end": {
                            "col": 22,
                            "line": 23,
                            "offset": 506
                        },
                        "svalue_start": {
                            "col": 9,
                            "line": 23,
                            "offset": 493
                        }
                    },
                    "start": {
                        "col": 5,
                        "line": 25,
                        "offset": 512
                    }
                },
                "$SQL": {
                    "abstract_content": "\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\"",
                    "end": {
                        "col": 128,
                        "line": 25,
                        "offset": 635
                    },
                    "start": {
                        "col": 15,
                        "line": 25,
                        "offset": 522
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/libuser.py",
        "start": {
            "col": 5,
            "line": 25,
            "offset": 512
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.formatted-sql-query",
        "end": {
            "col": 99,
            "line": 53,
            "offset": 1301
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "215f2754dce47faa771d17123348cdd31d14a19598d2b79e84a311aac6c627d2487235b8288698499a4b8ba734d06d97d0aba286e1bf9a6418330981a9751279_2",
            "is_ignored": false,
            "lines": "    c.execute(\"UPDATE users SET password = '{}' WHERE username = '{}'\".format(password, username))",
            "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],
                "subcategory": ["audit"],
                "technology": ["python"]
            },
            "metavars": {
                "$DB": {
                    "abstract_content": "c",
                    "end": {
                        "col": 6,
                        "line": 53,
                        "offset": 1208
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "conn.cursor()",
                        "svalue_end": {
                            "col": 22,
                            "line": 51,
                            "offset": 1201
                        },
                        "svalue_start": {
                            "col": 9,
                            "line": 51,
                            "offset": 1188
                        }
                    },
                    "start": {
                        "col": 5,
                        "line": 53,
                        "offset": 1207
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/libuser.py",
        "start": {
            "col": 5,
            "line": 53,
            "offset": 1207
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query",
        "end": {
            "col": 99,
            "line": 53,
            "offset": 1301
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "151d78d2c91f52ef12121f1f7936c162c4415de52f140a1ebca4475ed5d15a2ba76c34db0e7cc8815c849947818d96c28b5577f79e99bbe1c3b74c8e7a24721a_0",
            "is_ignored": false,
            "lines": "    c.execute(\"UPDATE users SET password = '{}' WHERE username = '{}'\".format(password, username))",
            "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],
                "subcategory": ["audit"],
                "technology": ["sqlalchemy"]
            },
            "metavars": {
                "$CONNECTION": {
                    "abstract_content": "c",
                    "end": {
                        "col": 6,
                        "line": 53,
                        "offset": 1208
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "conn.cursor()",
                        "svalue_end": {
                            "col": 22,
                            "line": 51,
                            "offset": 1201
                        },
                        "svalue_start": {
                            "col": 9,
                            "line": 51,
                            "offset": 1188
                        }
                    },
                    "start": {
                        "col": 5,
                        "line": 53,
                        "offset": 1207
                    }
                },
                "$SQL": {
                    "abstract_content": "\"UPDATE users SET password = '{}' WHERE username = '{}'\"",
                    "end": {
                        "col": 71,
                        "line": 53,
                        "offset": 1273
                    },
                    "start": {
                        "col": 15,
                        "line": 53,
                        "offset": 1217
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/libuser.py",
        "start": {
            "col": 5,
            "line": 53,
            "offset": 1207
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.xss.audit.template-unescaped-with-safe",
        "end": {
            "col": 32,
            "line": 8,
            "offset": 371
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "b9e6a8678755aac4202ed3a8b391c9a2586b9dd5663b23845f9fd841ed8a202b00cd2fe594183c41422386b87d0cf4738e37e2026530e4f046dcee34d59aa91a_0",
            "is_ignored": false,
            "lines": "        <p>{{ message | safe }}</p>",
            "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "MEDIUM",
                "likelihood": "LOW",
                "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"],
                "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"],
                "subcategory": ["audit"],
                "technology": ["flask"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": " }}",
                    "end": {
                        "col": 32,
                        "line": 8,
                        "offset": 371
                    },
                    "start": {
                        "col": 29,
                        "line": 8,
                        "offset": 368
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/templates/messages.html",
        "start": {
            "col": 12,
            "line": 8,
            "offset": 351
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 14,
            "offset": 535
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "f7790fcadcd888ab04862ada38f921fb8114502c204488f713501c71fc2f62f2a78852004dbb06c589b5da257cb6f3c796e9b97f567baadab7fb6eb2f5f3572c_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>OTP</b></label>\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"otp\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Enable</button>\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 8,
                        "offset": 242
                    },
                    "start": {
                        "col": 19,
                        "line": 8,
                        "offset": 238
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/templates/mfa.enable.html",
        "start": {
            "col": 5,
            "line": 8,
            "offset": 224
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 14,
            "line": 17,
            "offset": 621
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "f8df650796a80d0e6c0666832b9aa1a0d2366fb1a79148a4a116ad6371318d31b6e242130cf28bfa7cd398fbfe9b7b4ee11efcc75ab1d78c99eef39e385681e7_0",
            "is_ignored": false,
            "lines": "      <form method=\"POST\" action=\"/posts/\" class=\"w3-padding-16\">\n        <div class=\"w3-rest\">\n          <input class=\"w3-input w3-border\" type=\"text\" name=\"text\" placeholder=\"What are you thinking?\">\n        </div>\n      </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 25,
                        "line": 13,
                        "offset": 415
                    },
                    "start": {
                        "col": 21,
                        "line": 13,
                        "offset": 411
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/templates/posts.view.html",
        "start": {
            "col": 7,
            "line": 13,
            "offset": 397
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.xss.audit.template-unescaped-with-safe",
        "end": {
            "col": 57,
            "line": 23,
            "offset": 801
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "933fc3421032f4ecb3e879d5e34b668687b95e3e6fb4b626fb61643b5385a64217a3ebf50cc7758381db31b2bbe78b40575afcd6f9a2bc2f649cd1a4fd8c2e37_0",
            "is_ignored": false,
            "lines": "          <li><span class=\"w3-h3\">{{ post.text | safe }}</span></li>",
            "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "MEDIUM",
                "likelihood": "LOW",
                "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"],
                "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"],
                "subcategory": ["audit"],
                "technology": ["flask"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": " }}",
                    "end": {
                        "col": 57,
                        "line": 23,
                        "offset": 801
                    },
                    "start": {
                        "col": 54,
                        "line": 23,
                        "offset": 798
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/templates/posts.view.html",
        "start": {
            "col": 35,
            "line": 23,
            "offset": 779
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 16,
            "offset": 674
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "6dcd95901e26011e87704b85c5b28b354f8781d3c856b7fcb9aa98fbde3592aeda708c6b12d0e5dee56862e858d2069b98fb46d10a0fbf8555c48c80ba40b12b_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>New Password</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"password\" name=\"password\" required>\n        <label><b>Again</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"password_again\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Change</button>\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 8,
                        "offset": 220
                    },
                    "start": {
                        "col": 19,
                        "line": 8,
                        "offset": 216
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/templates/user.chpasswd.html",
        "start": {
            "col": 5,
            "line": 8,
            "offset": 202
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 18,
            "offset": 814
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "99ef87b5756a5d2839d68158619f48128e14011a6622701cfce6a93a91849274379c5e884d6162a18bd492cf9393f68c5ad42af4ce5fe8304304121ad1ed8636_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Username</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Email</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"email\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"password\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Create</button>\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 8,
                        "offset": 241
                    },
                    "start": {
                        "col": 19,
                        "line": 8,
                        "offset": 237
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/templates/user.create.html",
        "start": {
            "col": 5,
            "line": 8,
            "offset": 223
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 16,
            "offset": 653
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "1ddf5f474574f94fc71bd85f0c8455d9a85507cadd272ca2ab6228683fbe8480ea1efa7cf3257fbdc1e4c371461c1e10d0c79415d476b37b5b096a9262205302_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Email</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"password\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Login</button>\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 8,
                        "offset": 214
                    },
                    "start": {
                        "col": 19,
                        "line": 8,
                        "offset": 210
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/templates/user.login.html",
        "start": {
            "col": 5,
            "line": 8,
            "offset": 196
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 18,
            "offset": 802
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "2eeccd2eb60a2230b8e9e06832af85dfc09be51636eb1b5fe70a8231dcad390d1099e76ebc267102fa130d584fc8d5934ed4aee58189c9e2c9f9d729e54d93cd_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Username</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"password\" name=\"password\" required>\n        <label><b>OTP (if enabled in your account)</b></label>\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"otp\">\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Login</button>\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 8,
                        "offset": 214
                    },
                    "start": {
                        "col": 19,
                        "line": 8,
                        "offset": 210
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/templates/user.login.mfa.html",
        "start": {
            "col": 5,
            "line": 8,
            "offset": 196
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 11,
            "offset": 420
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "5bb760a390b4d88c30c346e07f6e7ed18a64d00e18e75da8539ff2be1162b54af981e50423d273bfac2aef7c9a581172246f3aba9523a148d6f5034ffd9d982c_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" action=\"/post\" class=\"w3-padding-16\">\n      <div class=\"w3-rest\">\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"text\" placeholder=\"What are you thinking?\">\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 7,
                        "offset": 224
                    },
                    "start": {
                        "col": 19,
                        "line": 7,
                        "offset": 220
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/templates/welcome.html",
        "start": {
            "col": 5,
            "line": 7,
            "offset": 206
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.avoid_hardcoded_config_SECRET_KEY",
        "end": {
            "col": 37,
            "line": 13,
            "offset": 270
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "ff968a1f54e7cf3e3e30d13b9077f6ac0c7db20ca9a843465352c7ba379542945786e69592af1165dac08816726ec0581b9e8bf0f87a5d8de4c530a369bb583d_0",
            "is_ignored": false,
            "lines": "app.config['SECRET_KEY'] = 'aaaaaaa'",
            "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-489: Active Debug Code"],
                "impact": "LOW",
                "likelihood": "LOW",
                "owasp": ["A05:2021 - Security Misconfiguration"],
                "references": ["https://bento.dev/checks/flask/avoid-hardcoded-config/", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"],
                "subcategory": ["audit"],
                "technology": ["flask"]
            },
            "metavars": {
                "$M": {
                    "abstract_content": "app",
                    "end": {
                        "col": 4,
                        "line": 13,
                        "offset": 237
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "Flask('vulpy')",
                        "svalue_end": {
                            "col": 21,
                            "line": 12,
                            "offset": 233
                        },
                        "svalue_start": {
                            "col": 7,
                            "line": 12,
                            "offset": 219
                        }
                    },
                    "start": {
                        "col": 1,
                        "line": 13,
                        "offset": 234
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/vulpy-ssl.py",
        "start": {
            "col": 1,
            "line": 13,
            "offset": 234
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.avoid_using_app_run_directly",
        "end": {
            "col": 87,
            "line": 29,
            "offset": 720
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "2f54c6e0cd6919f05f2e14a2dff2b45d38fb8e92e9b62c43d87adfb4649fb3c36cb466c0cc92c8f476589a655f02c040d7d0e634249fef3722084ed3592b01f3_0",
            "is_ignored": false,
            "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))",
            "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"],
                "impact": "MEDIUM",
                "likelihood": "LOW",
                "owasp": ["A01:2021 - Broken Access Control"],
                "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],
                "subcategory": ["vuln"],
                "technology": ["flask"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/vulpy-ssl.py",
        "start": {
            "col": 1,
            "line": 29,
            "offset": 634
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.debug-enabled",
        "end": {
            "col": 87,
            "line": 29,
            "offset": 720
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "8e9187edff5cef5c186d727d351c319411a12095153361bc6e5d581ad2b48534d477bd9b9f21ca86de35a82680a620513d3af107c5d35892a77f0010616e17f5_0",
            "is_ignored": false,
            "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))",
            "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
            "metadata": {
                "category": "security",
                "confidence": "HIGH",
                "cwe": ["CWE-489: Active Debug Code"],
                "impact": "MEDIUM",
                "likelihood": "HIGH",
                "owasp": "A06:2017 - Security Misconfiguration",
                "references": ["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],
                "subcategory": ["vuln"],
                "technology": ["flask"]
            },
            "metavars": {
                "$APP": {
                    "abstract_content": "app",
                    "end": {
                        "col": 4,
                        "line": 29,
                        "offset": 637
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "Flask('vulpy')",
                        "svalue_end": {
                            "col": 21,
                            "line": 12,
                            "offset": 233
                        },
                        "svalue_start": {
                            "col": 7,
                            "line": 12,
                            "offset": 219
                        }
                    },
                    "start": {
                        "col": 1,
                        "line": 29,
                        "offset": 634
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/vulpy-ssl.py",
        "start": {
            "col": 1,
            "line": 29,
            "offset": 634
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.avoid_hardcoded_config_SECRET_KEY",
        "end": {
            "col": 37,
            "line": 16,
            "offset": 351
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "ecc9b0ab55eeb3fbcaa18b8efd004110c6b91561d978fb45c5db39efc6a4a61ecd5798f35824e3ef6567814c8f060cdd4d72d1bdc5f1f0ee2ce25661677439c8_0",
            "is_ignored": false,
            "lines": "app.config['SECRET_KEY'] = 'aaaaaaa'",
            "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-489: Active Debug Code"],
                "impact": "LOW",
                "likelihood": "LOW",
                "owasp": ["A05:2021 - Security Misconfiguration"],
                "references": ["https://bento.dev/checks/flask/avoid-hardcoded-config/", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"],
                "subcategory": ["audit"],
                "technology": ["flask"]
            },
            "metavars": {
                "$M": {
                    "abstract_content": "app",
                    "end": {
                        "col": 4,
                        "line": 16,
                        "offset": 318
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "Flask('vulpy')",
                        "svalue_end": {
                            "col": 21,
                            "line": 15,
                            "offset": 314
                        },
                        "svalue_start": {
                            "col": 7,
                            "line": 15,
                            "offset": 300
                        }
                    },
                    "start": {
                        "col": 1,
                        "line": 16,
                        "offset": 315
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/vulpy.py",
        "start": {
            "col": 1,
            "line": 16,
            "offset": 315
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.avoid_using_app_run_directly",
        "end": {
            "col": 72,
            "line": 55,
            "offset": 1341
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "86b212c5652863cae53a2dc648135106ea14d7c157d27cf55fe494542767e38ecd0e5ed4f94450aba536569078a200612aaeec55cc0c2ca5e24403ac9c0928af_0",
            "is_ignored": false,
            "lines": "app.run(debug=True, host='127.0.1.1', port=5000, extra_files='csp.txt')",
            "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"],
                "impact": "MEDIUM",
                "likelihood": "LOW",
                "owasp": ["A01:2021 - Broken Access Control"],
                "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],
                "subcategory": ["vuln"],
                "technology": ["flask"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/vulpy.py",
        "start": {
            "col": 1,
            "line": 55,
            "offset": 1270
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.debug-enabled",
        "end": {
            "col": 72,
            "line": 55,
            "offset": 1341
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "9d2aff123ce4364efcda9474c878714b49192820fba9d3ba4dc7083167ec840c6175d4af5df270733e4758dda2f4fbdd1ecf23362b98256e3947dccd2db4ed14_0",
            "is_ignored": false,
            "lines": "app.run(debug=True, host='127.0.1.1', port=5000, extra_files='csp.txt')",
            "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
            "metadata": {
                "category": "security",
                "confidence": "HIGH",
                "cwe": ["CWE-489: Active Debug Code"],
                "impact": "MEDIUM",
                "likelihood": "HIGH",
                "owasp": "A06:2017 - Security Misconfiguration",
                "references": ["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],
                "subcategory": ["vuln"],
                "technology": ["flask"]
            },
            "metavars": {
                "$APP": {
                    "abstract_content": "app",
                    "end": {
                        "col": 4,
                        "line": 55,
                        "offset": 1273
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "Flask('vulpy')",
                        "svalue_end": {
                            "col": 21,
                            "line": 15,
                            "offset": 314
                        },
                        "svalue_start": {
                            "col": 7,
                            "line": 15,
                            "offset": 300
                        }
                    },
                    "start": {
                        "col": 1,
                        "line": 55,
                        "offset": 1270
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "bad/vulpy.py",
        "start": {
            "col": 1,
            "line": 55,
            "offset": 1270
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 43,
            "line": 3,
            "offset": 53
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "d355175468b36593693f96660c52eeda88dd95fdb05a3e1844148d341a7b78d9f4b0fa3765b3f180337f9f13e55be262d17716df3b48c2b72e4e771056b9c631_0",
            "is_ignored": false,
            "lines": "with open('/tmp/darkweb2017-top10000.txt') as f:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/cutpasswd.py",
        "start": {
            "col": 6,
            "line": 3,
            "offset": 16
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.unspecified-open-encoding",
        "end": {
            "col": 43,
            "line": 3,
            "offset": 53
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "35e289a10dccc2503055565161771c6b6a8585fa14c2ddbd1a2d23eabfc5c34d00f71975cdde7285faa3508b3625688b061e736bb277599fd4ff1f6e88583af7_0",
            "is_ignored": false,
            "lines": "with open('/tmp/darkweb2017-top10000.txt') as f:",
            "message": "Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").",
            "metadata": {
                "category": "best-practice",
                "references": ["https://www.python.org/dev/peps/pep-0597/", "https://docs.python.org/3/library/functions.html#open"],
                "technology": ["python"]
            },
            "metavars": {
                "$FILE": {
                    "abstract_content": "'/tmp/darkweb2017-top10000.txt'",
                    "end": {
                        "col": 42,
                        "line": 3,
                        "offset": 52
                    },
                    "start": {
                        "col": 11,
                        "line": 3,
                        "offset": 21
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/cutpasswd.py",
        "start": {
            "col": 6,
            "line": 3,
            "offset": 16
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.requests.best-practice.use-raise-for-status",
        "end": {
            "col": 87,
            "line": 22,
            "offset": 352
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "2d3ca684b8e56225264241107a66bb653f0725d52cd2665f32d53b7c16411486ac38e99bfcf628381d7664e7baf850d3f350c6db365e7fb0d3a71142311abe7b_0",
            "is_ignored": false,
            "lines": "    response = requests.post(URL, data = {'username': username, 'password': password})",
            "message": "There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],
                "technology": ["requests"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/httpbrute.py",
        "start": {
            "col": 16,
            "line": 22,
            "offset": 281
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.requests.best-practice.use-timeout",
        "end": {
            "col": 87,
            "line": 22,
            "offset": 352
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "4987eca0855e3606c2a8e3fd170275b18fd9516d5caa762d4c879969d4f48b91861315d64b3f6d804a209c5fbf10a8979ad89535ae2bf0354614bbc03bb7a94b_0",
            "fix": "requests.post(URL, data = {'username': username, 'password': password}, timeout=30)",
            "is_ignored": false,
            "lines": "    response = requests.post(URL, data = {'username': username, 'password': password})",
            "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],
                "technology": ["requests"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/httpbrute.py",
        "start": {
            "col": 16,
            "line": 22,
            "offset": 281
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.insecure-transport.requests.request-with-http",
        "end": {
            "col": 33,
            "line": 22,
            "offset": 298
        },
        "extra": {
            "dataflow_trace": {
                "intermediate_vars": [{
                    "content": "URL",
                    "location": {
                        "end": {
                            "col": 4,
                            "line": 5,
                            "offset": 44
                        },
                        "path": "good/httpbrute.py",
                        "start": {
                            "col": 1,
                            "line": 5,
                            "offset": 41
                        }
                    }
                }, {
                    "content": "URL",
                    "location": {
                        "end": {
                            "col": 4,
                            "line": 5,
                            "offset": 44
                        },
                        "path": "good/httpbrute.py",
                        "start": {
                            "col": 1,
                            "line": 5,
                            "offset": 41
                        }
                    }
                }],
                "taint_sink": ["CliLoc", [{
                    "end": {
                        "col": 33,
                        "line": 22,
                        "offset": 298
                    },
                    "path": "good/httpbrute.py",
                    "start": {
                        "col": 30,
                        "line": 22,
                        "offset": 295
                    }
                }, "URL"]],
                "taint_source": ["CliLoc", [{
                    "end": {
                        "col": 41,
                        "line": 5,
                        "offset": 81
                    },
                    "path": "good/httpbrute.py",
                    "start": {
                        "col": 7,
                        "line": 5,
                        "offset": 47
                    }
                }, "'http://127.0.1.1:5000/user/login'"]]
            },
            "engine_kind": "OSS",
            "fingerprint": "32bb4a68002f724c9b8e4a23a1fe9cf89c9bd0605e37e89af0e7b1866d85c1595cb4fff0492dd65adfb65602ed544874a0520d06fe70375ed89c65b701ae1e99_0",
            "is_ignored": false,
            "lines": "    response = requests.post(URL, data = {'username': username, 'password': password})",
            "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.",
            "metadata": {
                "asvs": {
                    "control_id": "9.1.1 Weak TLS",
                    "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
                    "section": "V9 Communications Verification Requirements",
                    "version": "4"
                },
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"],
                "impact": "LOW",
                "likelihood": "LOW",
                "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"],
                "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],
                "subcategory": ["audit"],
                "technology": ["requests"]
            },
            "metavars": {
                "$SINK": {
                    "abstract_content": "URL",
                    "end": {
                        "col": 33,
                        "line": 22,
                        "offset": 298
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "'http://127.0.1.1:5000/user/login'",
                        "svalue_end": {
                            "col": 41,
                            "line": 5,
                            "offset": 81
                        },
                        "svalue_start": {
                            "col": 7,
                            "line": 5,
                            "offset": 47
                        }
                    },
                    "start": {
                        "col": 30,
                        "line": 22,
                        "offset": 295
                    }
                },
                "$URL": {
                    "abstract_content": "http://127.0.1.1:5000/user/login",
                    "end": {
                        "col": 40,
                        "line": 5,
                        "offset": 80
                    },
                    "start": {
                        "col": 8,
                        "line": 5,
                        "offset": 48
                    }
                },
                "$W": {
                    "abstract_content": "post",
                    "end": {
                        "col": 29,
                        "line": 22,
                        "offset": 294
                    },
                    "start": {
                        "col": 25,
                        "line": 22,
                        "offset": 290
                    }
                }
            },
            "severity": "INFO",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/httpbrute.py",
        "start": {
            "col": 30,
            "line": 22,
            "offset": 295
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.jwt.security.jwt-python-hardcoded-secret",
        "end": {
            "col": 18,
            "line": 24,
            "offset": 448
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "b82f46d9e6652267a948b8d5bbf6b657e4128373c1ffbcba716426544c4394dad668fddad1807d29aad742e5b7d6866b73f8c067b310863b205fbdfb042e6233_0",
            "is_ignored": false,
            "lines": "        }, secret, algorithm='HS256').decode()",
            "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)",
            "metadata": {
                "category": "security",
                "confidence": "HIGH",
                "cwe": ["CWE-522: Insufficiently Protected Credentials"],
                "cwe2021-top25": true,
                "impact": "MEDIUM",
                "likelihood": "HIGH",
                "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"],
                "references": ["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],
                "subcategory": ["vuln"],
                "technology": ["jwt"]
            },
            "metavars": {
                "$SECRET": {
                    "abstract_content": "secret",
                    "end": {
                        "col": 18,
                        "line": 24,
                        "offset": 448
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "'MYSUPERSECRETKEY'",
                        "svalue_end": {
                            "col": 28,
                            "line": 10,
                            "offset": 141
                        },
                        "svalue_start": {
                            "col": 10,
                            "line": 10,
                            "offset": 123
                        }
                    },
                    "start": {
                        "col": 12,
                        "line": 24,
                        "offset": 442
                    }
                },
                "$X": {
                    "abstract_content": "{'username'username'nbf'now'exp'now+not_after}",
                    "end": {
                        "col": 10,
                        "line": 24,
                        "offset": 440
                    },
                    "start": {
                        "col": 24,
                        "line": 20,
                        "offset": 348
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/libapi.py",
        "start": {
            "col": 12,
            "line": 24,
            "offset": 442
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.security.audit.formatted-sql-query",
        "end": {
            "col": 171,
            "line": 61,
            "offset": 1523
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "54f2b8f28522a111b9beb73dc670c8ff79e95af93fd7ebd2db302cd8b353d5e4aed28e54ef462e8c39a44765d60002054f694106206f1b954372db6c939e101e_0",
            "is_ignored": false,
            "lines": "    c.execute(\"INSERT INTO users (username, password, salt, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')\" %(username, '', '', 0, 0, ''))",
            "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],
                "subcategory": ["audit"],
                "technology": ["python"]
            },
            "metavars": {
                "$DB": {
                    "abstract_content": "c",
                    "end": {
                        "col": 6,
                        "line": 61,
                        "offset": 1358
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "conn.cursor()",
                        "svalue_end": {
                            "col": 22,
                            "line": 60,
                            "offset": 1352
                        },
                        "svalue_start": {
                            "col": 9,
                            "line": 60,
                            "offset": 1339
                        }
                    },
                    "start": {
                        "col": 5,
                        "line": 61,
                        "offset": 1357
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/libuser.py",
        "start": {
            "col": 5,
            "line": 61,
            "offset": 1357
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query",
        "end": {
            "col": 171,
            "line": 61,
            "offset": 1523
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "096c2ca8d2a23ec3ce6f23b2602bf70742fdc2ba1e039a9afc7892588442f59587c650ba959b1db0d26a55738e23632f1c8fcbd418a5d8218a42c63117581624_0",
            "is_ignored": false,
            "lines": "    c.execute(\"INSERT INTO users (username, password, salt, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')\" %(username, '', '', 0, 0, ''))",
            "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "HIGH",
                "likelihood": "LOW",
                "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
                "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],
                "subcategory": ["audit"],
                "technology": ["sqlalchemy"]
            },
            "metavars": {
                "$CONNECTION": {
                    "abstract_content": "c",
                    "end": {
                        "col": 6,
                        "line": 61,
                        "offset": 1358
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "conn.cursor()",
                        "svalue_end": {
                            "col": 22,
                            "line": 60,
                            "offset": 1352
                        },
                        "svalue_start": {
                            "col": 9,
                            "line": 60,
                            "offset": 1339
                        }
                    },
                    "start": {
                        "col": 5,
                        "line": 61,
                        "offset": 1357
                    }
                },
                "$SQL": {
                    "abstract_content": "\"INSERT INTO users (username, password, salt, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')\"",
                    "end": {
                        "col": 140,
                        "line": 61,
                        "offset": 1492
                    },
                    "start": {
                        "col": 15,
                        "line": 61,
                        "offset": 1367
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/libuser.py",
        "start": {
            "col": 5,
            "line": 61,
            "offset": 1357
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.maintainability.code-after-unconditional-return",
        "end": {
            "col": 30,
            "line": 87,
            "offset": 2621
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "789985c82e401fa4b85632e42cf58ff770106e7940356bc50640eeeecf07e9a18a5bc11a23f20a5530de53fb98b6d295c235ecb2f8c8983e28a0c4c4ecb3a536_0",
            "is_ignored": false,
            "lines": "    return redirect('/')\n    flash(\"Password changed\")",
            "message": "code after return statement will not be executed",
            "metadata": {
                "category": "maintainability",
                "technology": ["python"]
            },
            "metavars": {
                "$S": {
                    "abstract_content": "flash(\"Password changed\")",
                    "end": {
                        "col": 30,
                        "line": 87,
                        "offset": 2621
                    },
                    "start": {
                        "col": 5,
                        "line": 87,
                        "offset": 2596
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/mod_user.py",
        "start": {
            "col": 5,
            "line": 86,
            "offset": 2571
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.xss.audit.template-unescaped-with-safe",
        "end": {
            "col": 32,
            "line": 8,
            "offset": 371
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "a4f00f76ac5fba88c1a41a96a710bbc8f76239bbbc00264514c0805d2074ae400484dab1abe3fb3cdc4081a9654ba83005e561437d20f17461bde88887fa7555_0",
            "is_ignored": false,
            "lines": "        <p>{{ message | safe }}</p>",
            "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "MEDIUM",
                "likelihood": "LOW",
                "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"],
                "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"],
                "subcategory": ["audit"],
                "technology": ["flask"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": " }}",
                    "end": {
                        "col": 32,
                        "line": 8,
                        "offset": 371
                    },
                    "start": {
                        "col": 29,
                        "line": 8,
                        "offset": 368
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/templates/messages.html",
        "start": {
            "col": 12,
            "line": 8,
            "offset": 351
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 14,
            "offset": 535
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "c5e15a3493a0d9eef309977a26ff74f19c563b66743d7cf28a4ee8288511d19374f11067c5d89d33592ab3cd8320eb984724fba6812d8c8ecf06e398b14fce5d_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>OTP</b></label>\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"otp\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Enable</button>\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 8,
                        "offset": 242
                    },
                    "start": {
                        "col": 19,
                        "line": 8,
                        "offset": 238
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/templates/mfa.enable.html",
        "start": {
            "col": 5,
            "line": 8,
            "offset": 224
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 14,
            "line": 17,
            "offset": 621
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "fc10fb5dcb35bac7e6fd0279235af3b6d43ac38bb3eba24c7d205647e0f45765a91ddeccdcda3a7baee4bf3ab8d8422392f143d84e61fbfd2d8679917fa91347_0",
            "is_ignored": false,
            "lines": "      <form method=\"POST\" action=\"/posts/\" class=\"w3-padding-16\">\n        <div class=\"w3-rest\">\n          <input class=\"w3-input w3-border\" type=\"text\" name=\"text\" placeholder=\"What are you thinking?\">\n        </div>\n      </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 25,
                        "line": 13,
                        "offset": 415
                    },
                    "start": {
                        "col": 21,
                        "line": 13,
                        "offset": 411
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/templates/posts.view.html",
        "start": {
            "col": 7,
            "line": 13,
            "offset": 397
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.xss.audit.template-unescaped-with-safe",
        "end": {
            "col": 57,
            "line": 23,
            "offset": 801
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "5f020c05b98bb8b0ef50cec4b4c835f40ca84efab31b72777fba754d5f83d4a93f89ef8f9ed64ab53553b13f04c81660ee0d1fc600c1fe2492804c9a85b1c597_0",
            "is_ignored": false,
            "lines": "          <li><span class=\"w3-h3\">{{ post.text | safe }}</span></li>",
            "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],
                "cwe2021-top25": true,
                "cwe2022-top25": true,
                "impact": "MEDIUM",
                "likelihood": "LOW",
                "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"],
                "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"],
                "subcategory": ["audit"],
                "technology": ["flask"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": " }}",
                    "end": {
                        "col": 57,
                        "line": 23,
                        "offset": 801
                    },
                    "start": {
                        "col": 54,
                        "line": 23,
                        "offset": 798
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/templates/posts.view.html",
        "start": {
            "col": 35,
            "line": 23,
            "offset": 779
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 18,
            "offset": 853
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "778726e69c2fc21bfbf896ea15ede5f5bf6a3805ef29059297a0ceb9fadc4ff4a3841b58db27b810ffa38a0a0b158a700885bb813fcf0825f2adcc4c0581a149_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Current Password</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"password\" name=\"current_password\" required>\n        <label><b>New Password</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"password\" name=\"new_password\" required>\n        <label><b>New Password (again)</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"new_password_again\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Change</button>\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 8,
                        "offset": 220
                    },
                    "start": {
                        "col": 19,
                        "line": 8,
                        "offset": 216
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/templates/user.chpasswd.html",
        "start": {
            "col": 5,
            "line": 8,
            "offset": 202
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 18,
            "offset": 814
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "1f7aac002829c8f5c00b98193b0de67c7b2ea031134fe59cb2338500d0ffc618e57b13eb0afb4c209e272d017327f9f3efa05a022ec9760c35316265de6d4c1c_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Username</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Email</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"email\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"password\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Create</button>\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 8,
                        "offset": 241
                    },
                    "start": {
                        "col": 19,
                        "line": 8,
                        "offset": 237
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/templates/user.create.html",
        "start": {
            "col": 5,
            "line": 8,
            "offset": 223
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 16,
            "offset": 653
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "b8d7da8b3090c8e590587c82dad9bebc7bf75c976fa04a2f40229e95be6b7455892073c78edbe7659edc4211ea6cd6871b222ddf16a018f7e68df499d3864a39_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Email</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"password\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Login</button>\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 8,
                        "offset": 214
                    },
                    "start": {
                        "col": 19,
                        "line": 8,
                        "offset": 210
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/templates/user.login.html",
        "start": {
            "col": 5,
            "line": 8,
            "offset": 196
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 18,
            "offset": 802
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "a34f4098ce75b6afebfe30fa7f722207be1fca121cf7e35dbcf2fa4840e1ec17fc8fa2772486077e0e029b04629c3454760de9d1e26a137d6696f1108b952c9d_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Username</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"password\" name=\"password\" required>\n        <label><b>OTP (if enabled in your account)</b></label>\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"otp\">\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Login</button>\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 8,
                        "offset": 214
                    },
                    "start": {
                        "col": 19,
                        "line": 8,
                        "offset": 210
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/templates/user.login.mfa.html",
        "start": {
            "col": 5,
            "line": 8,
            "offset": 196
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.django.security.django-no-csrf-token",
        "end": {
            "col": 12,
            "line": 11,
            "offset": 420
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "bd67cd3ce50f34d4f182b10e344b730d743906507efc953d36d79302d73990da6e0e5f6ba8389fd1517763cd51305e64fc279717b4b6c0665370bb3ad468d0b2_0",
            "is_ignored": false,
            "lines": "    <form method=\"POST\" action=\"/post\" class=\"w3-padding-16\">\n      <div class=\"w3-rest\">\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"text\" placeholder=\"What are you thinking?\">\n      </div>\n    </form>",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
                "impact": "MEDIUM",
                "likelihood": "MEDIUM",
                "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
                "subcategory": ["guardrail"],
                "technology": ["django"]
            },
            "metavars": {
                "$1": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 5,
                        "line": 1,
                        "offset": 4
                    },
                    "start": {
                        "col": 1,
                        "line": 1,
                        "offset": 0
                    }
                },
                "$METHOD": {
                    "abstract_content": "POST",
                    "end": {
                        "col": 23,
                        "line": 7,
                        "offset": 224
                    },
                    "start": {
                        "col": 19,
                        "line": 7,
                        "offset": 220
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/templates/welcome.html",
        "start": {
            "col": 5,
            "line": 7,
            "offset": 206
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.avoid_hardcoded_config_SECRET_KEY",
        "end": {
            "col": 37,
            "line": 13,
            "offset": 270
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "edc6d05cef6d2733d1db06432f28552b87a14e86c4d88df603a96144f65dcd8689c0a006934270ae61d226da6142867601e92de99f63a9e6d798108b7372b991_0",
            "is_ignored": false,
            "lines": "app.config['SECRET_KEY'] = 'aaaaaaa'",
            "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-489: Active Debug Code"],
                "impact": "LOW",
                "likelihood": "LOW",
                "owasp": ["A05:2021 - Security Misconfiguration"],
                "references": ["https://bento.dev/checks/flask/avoid-hardcoded-config/", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"],
                "subcategory": ["audit"],
                "technology": ["flask"]
            },
            "metavars": {
                "$M": {
                    "abstract_content": "app",
                    "end": {
                        "col": 4,
                        "line": 13,
                        "offset": 237
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "Flask('vulpy')",
                        "svalue_end": {
                            "col": 21,
                            "line": 12,
                            "offset": 233
                        },
                        "svalue_start": {
                            "col": 7,
                            "line": 12,
                            "offset": 219
                        }
                    },
                    "start": {
                        "col": 1,
                        "line": 13,
                        "offset": 234
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/vulpy-ssl.py",
        "start": {
            "col": 1,
            "line": 13,
            "offset": 234
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.avoid_using_app_run_directly",
        "end": {
            "col": 87,
            "line": 29,
            "offset": 720
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "8764ad0ea6785a8e4a5f9df9f0e0e26e73fd0a7f93c8940da70208919b566fbc01fe9f6116cf451d7567c89c875d26ce1641aa26018a6c9abf4775ecd7363485_0",
            "is_ignored": false,
            "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))",
            "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"],
                "impact": "MEDIUM",
                "likelihood": "LOW",
                "owasp": ["A01:2021 - Broken Access Control"],
                "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],
                "subcategory": ["vuln"],
                "technology": ["flask"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/vulpy-ssl.py",
        "start": {
            "col": 1,
            "line": 29,
            "offset": 634
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.debug-enabled",
        "end": {
            "col": 87,
            "line": 29,
            "offset": 720
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "164769bac65b70c90f4e721aa411b26aaf24d296894fbad196899c6a715cae5c5fdb19893c6644ab156d8b5377ad31820bead353dae3fe0c0d76cf67efdf508d_0",
            "is_ignored": false,
            "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))",
            "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
            "metadata": {
                "category": "security",
                "confidence": "HIGH",
                "cwe": ["CWE-489: Active Debug Code"],
                "impact": "MEDIUM",
                "likelihood": "HIGH",
                "owasp": "A06:2017 - Security Misconfiguration",
                "references": ["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],
                "subcategory": ["vuln"],
                "technology": ["flask"]
            },
            "metavars": {
                "$APP": {
                    "abstract_content": "app",
                    "end": {
                        "col": 4,
                        "line": 29,
                        "offset": 637
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "Flask('vulpy')",
                        "svalue_end": {
                            "col": 21,
                            "line": 12,
                            "offset": 233
                        },
                        "svalue_start": {
                            "col": 7,
                            "line": 12,
                            "offset": 219
                        }
                    },
                    "start": {
                        "col": 1,
                        "line": 29,
                        "offset": 634
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/vulpy-ssl.py",
        "start": {
            "col": 1,
            "line": 29,
            "offset": 634
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.avoid_hardcoded_config_SECRET_KEY",
        "end": {
            "col": 94,
            "line": 17,
            "offset": 409
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "f8cf172db01c89027565553c4c2990d879e6b7d4b59741b721195fa4daaaeb1169a38fbec354c6cc263a01dc97b2c7c8279b8c80b4c115bb7dc14dceedab10a6_0",
            "is_ignored": false,
            "lines": "app.config['SECRET_KEY'] = '123aa8a93bdde342c871564a62282af857bda14b3359fde95d0c5e4b321610c1'",
            "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead",
            "metadata": {
                "category": "security",
                "confidence": "LOW",
                "cwe": ["CWE-489: Active Debug Code"],
                "impact": "LOW",
                "likelihood": "LOW",
                "owasp": ["A05:2021 - Security Misconfiguration"],
                "references": ["https://bento.dev/checks/flask/avoid-hardcoded-config/", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"],
                "subcategory": ["audit"],
                "technology": ["flask"]
            },
            "metavars": {
                "$M": {
                    "abstract_content": "app",
                    "end": {
                        "col": 4,
                        "line": 17,
                        "offset": 319
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "Flask('vulpy')",
                        "svalue_end": {
                            "col": 21,
                            "line": 16,
                            "offset": 315
                        },
                        "svalue_start": {
                            "col": 7,
                            "line": 16,
                            "offset": 301
                        }
                    },
                    "start": {
                        "col": 1,
                        "line": 17,
                        "offset": 316
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/vulpy.py",
        "start": {
            "col": 1,
            "line": 17,
            "offset": 316
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.avoid_using_app_run_directly",
        "end": {
            "col": 72,
            "line": 53,
            "offset": 1393
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "12b0e28a998787d8948ce96956a11ad0448fdf1cbe675a84274fbba2695e5e07a72e490a94c338480fd62101b6a150d0fdb40fc05f4c7dbb2d0c0bf55d34af57_0",
            "is_ignored": false,
            "lines": "app.run(debug=True, host='127.0.1.1', port=5001, extra_files='csp.txt')",
            "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"],
                "impact": "MEDIUM",
                "likelihood": "LOW",
                "owasp": ["A01:2021 - Broken Access Control"],
                "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],
                "subcategory": ["vuln"],
                "technology": ["flask"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/vulpy.py",
        "start": {
            "col": 1,
            "line": 53,
            "offset": 1322
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.flask.security.audit.debug-enabled",
        "end": {
            "col": 72,
            "line": 53,
            "offset": 1393
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "b164e9dee81fe8691f8d9479ecedcbcdc9e0cdf5a7b0f780038d4c2289be22fadea919af7ff5fd45d1e54ba022ce7c1334d5eaf720101887d2d107ca67382bda_0",
            "is_ignored": false,
            "lines": "app.run(debug=True, host='127.0.1.1', port=5001, extra_files='csp.txt')",
            "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
            "metadata": {
                "category": "security",
                "confidence": "HIGH",
                "cwe": ["CWE-489: Active Debug Code"],
                "impact": "MEDIUM",
                "likelihood": "HIGH",
                "owasp": "A06:2017 - Security Misconfiguration",
                "references": ["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],
                "subcategory": ["vuln"],
                "technology": ["flask"]
            },
            "metavars": {
                "$APP": {
                    "abstract_content": "app",
                    "end": {
                        "col": 4,
                        "line": 53,
                        "offset": 1325
                    },
                    "propagated_value": {
                        "svalue_abstract_content": "Flask('vulpy')",
                        "svalue_end": {
                            "col": 21,
                            "line": 16,
                            "offset": 315
                        },
                        "svalue_start": {
                            "col": 7,
                            "line": 16,
                            "offset": 301
                        }
                    },
                    "start": {
                        "col": 1,
                        "line": 53,
                        "offset": 1322
                    }
                }
            },
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "good/vulpy.py",
        "start": {
            "col": 1,
            "line": 53,
            "offset": 1322
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.cryptography.security.crypto-mode-without-authentication",
        "end": {
            "col": 101,
            "line": 24,
            "offset": 630
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "b217ba59d6e8f853e8daaf1d66177d9a57d06c60c4a7ffaa5ae7464f3898f4cbae26ecef2a82b4277e825f52d2e0bf89d83192320c6bfb7038c6a730805d4d84_0",
            "is_ignored": false,
            "lines": "    cipher = Cipher(algorithms.AES(key_digest), modes.CFB(unhexlify(iv)), backend=default_backend())",
            "message": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],
                "impact": "MEDIUM",
                "likelihood": "LOW",
                "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"],
                "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],
                "subcategory": ["audit"],
                "technology": ["cryptography"]
            },
            "metavars": {
                "$HAZMAT_MODE": {
                    "abstract_content": "modes.CFB",
                    "end": {
                        "col": 58,
                        "line": 24,
                        "offset": 587
                    },
                    "start": {
                        "col": 49,
                        "line": 24,
                        "offset": 578
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/aes-decrypt.py",
        "start": {
            "col": 14,
            "line": 24,
            "offset": 543
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.cryptography.security.crypto-mode-without-authentication",
        "end": {
            "col": 90,
            "line": 28,
            "offset": 692
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "b2ac2e0670ca7c780178ae4f158e65ff7ba6bdef9d384e9c291e9d6a86ef3738bf14db437017881a34279edcc6418d8c1a1328f310ee4bbe0fe179db8470bb6b_0",
            "is_ignored": false,
            "lines": "    cipher = Cipher(algorithms.AES(key_digest), modes.CFB(iv), backend=default_backend())",
            "message": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ",
            "metadata": {
                "category": "security",
                "confidence": "MEDIUM",
                "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],
                "impact": "MEDIUM",
                "likelihood": "LOW",
                "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"],
                "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],
                "subcategory": ["audit"],
                "technology": ["cryptography"]
            },
            "metavars": {
                "$HAZMAT_MODE": {
                    "abstract_content": "modes.CFB",
                    "end": {
                        "col": 58,
                        "line": 28,
                        "offset": 660
                    },
                    "start": {
                        "col": 49,
                        "line": 28,
                        "offset": 651
                    }
                }
            },
            "severity": "ERROR",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/aes-encrypt.py",
        "start": {
            "col": 14,
            "line": 28,
            "offset": 616
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 31,
            "line": 31,
            "offset": 863
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "de6e29526a6047a9754201124ff9abd33f3897baf323da6ad095332c7443dae2b2d2c0bb9fc2b52ed10b119f2d64a40fddac353877277fef91976b92faa1ca4c_0",
            "is_ignored": false,
            "lines": "with open('/tmp/ca.key', 'wb') as out:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/ca-create.py",
        "start": {
            "col": 6,
            "line": 31,
            "offset": 838
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 31,
            "line": 34,
            "offset": 930
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "de6e29526a6047a9754201124ff9abd33f3897baf323da6ad095332c7443dae2b2d2c0bb9fc2b52ed10b119f2d64a40fddac353877277fef91976b92faa1ca4c_1",
            "is_ignored": false,
            "lines": "with open('/tmp/ca.pub', 'wb') as out:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/ca-create.py",
        "start": {
            "col": 6,
            "line": 34,
            "offset": 905
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 32,
            "line": 58,
            "offset": 1948
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "de6e29526a6047a9754201124ff9abd33f3897baf323da6ad095332c7443dae2b2d2c0bb9fc2b52ed10b119f2d64a40fddac353877277fef91976b92faa1ca4c_2",
            "is_ignored": false,
            "lines": "with open('/tmp/ca.cert', 'wb') as out:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/ca-create.py",
        "start": {
            "col": 6,
            "line": 58,
            "offset": 1922
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 33,
            "line": 12,
            "offset": 368
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "1d2f89b8d23342fedd7366c58714c5947ee2f9daf30aed8587c0e456dea0f8e02eef433078170448437f57e39f91ffd410884ad808913701c27e7309483a0573_0",
            "is_ignored": false,
            "lines": "with open(\"/tmp/acme.key\", \"rb\") as key_file:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/ca-csr-create.py",
        "start": {
            "col": 6,
            "line": 12,
            "offset": 341
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 33,
            "line": 35,
            "offset": 1142
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "1d2f89b8d23342fedd7366c58714c5947ee2f9daf30aed8587c0e456dea0f8e02eef433078170448437f57e39f91ffd410884ad808913701c27e7309483a0573_1",
            "is_ignored": false,
            "lines": "with open(\"/tmp/acme.csr\", \"wb\") as out:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/ca-csr-create.py",
        "start": {
            "col": 6,
            "line": 35,
            "offset": 1115
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 32,
            "line": 13,
            "offset": 368
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "4d49e3e6c625e34a6e532eced0bbe365d7a06de4b9f1879ab9af9a5c7b85b098b783d1a8c9a186fa5622de092dadc14511b3d59713a8b35d162fb0d003be7a5e_0",
            "is_ignored": false,
            "lines": "with open(\"/tmp/ca.cert\", \"rb\") as ca_cert_file:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/ca-csr-load.py",
        "start": {
            "col": 6,
            "line": 13,
            "offset": 342
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 33,
            "line": 16,
            "offset": 504
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "4d49e3e6c625e34a6e532eced0bbe365d7a06de4b9f1879ab9af9a5c7b85b098b783d1a8c9a186fa5622de092dadc14511b3d59713a8b35d162fb0d003be7a5e_1",
            "is_ignored": false,
            "lines": "with open(\"/tmp/acme.csr\", \"rb\") as csr_file:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/ca-csr-load.py",
        "start": {
            "col": 6,
            "line": 16,
            "offset": 477
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 31,
            "line": 19,
            "offset": 618
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "4d49e3e6c625e34a6e532eced0bbe365d7a06de4b9f1879ab9af9a5c7b85b098b783d1a8c9a186fa5622de092dadc14511b3d59713a8b35d162fb0d003be7a5e_2",
            "is_ignored": false,
            "lines": "with open(\"/tmp/ca.key\", \"rb\") as key_file:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/ca-csr-load.py",
        "start": {
            "col": 6,
            "line": 19,
            "offset": 593
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 34,
            "line": 35,
            "offset": 1251
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "4d49e3e6c625e34a6e532eced0bbe365d7a06de4b9f1879ab9af9a5c7b85b098b783d1a8c9a186fa5622de092dadc14511b3d59713a8b35d162fb0d003be7a5e_3",
            "is_ignored": false,
            "lines": "with open('/tmp/acme.cert', 'wb') as out:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/ca-csr-load.py",
        "start": {
            "col": 6,
            "line": 35,
            "offset": 1223
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.requests.best-practice.use-raise-for-status",
        "end": {
            "col": 40,
            "line": 21,
            "offset": 776
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "f8940eca2ae7e245f0453bb28026eede2eb0699f4be92ce512f7e553cd34cbf77aea15e33003c7059707b175a7d113600597e7d0cf219d813ad3b074c9b06135_0",
            "is_ignored": false,
            "lines": "    with requests.get(url, stream=True) as r:",
            "message": "There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],
                "technology": ["requests"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/generate_bad_passwords.py",
        "start": {
            "col": 10,
            "line": 21,
            "offset": 746
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.requests.best-practice.use-timeout",
        "end": {
            "col": 40,
            "line": 21,
            "offset": 776
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "06ca772bbd3e9ce9cc789389cec9526679bcf021c79c36411fe3c6cf9f995dad8907b9dbbfca25cea197fb33d91973240440073befbfc295d6d517ee6a9eb9cf_0",
            "fix": "requests.get(url, stream=True, timeout=30)",
            "is_ignored": false,
            "lines": "    with requests.get(url, stream=True) as r:",
            "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],
                "technology": ["requests"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/generate_bad_passwords.py",
        "start": {
            "col": 10,
            "line": 21,
            "offset": 746
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.requests.best-practice.use-raise-for-status",
        "end": {
            "col": 91,
            "line": 25,
            "offset": 700
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "a0c7771f196e5f0bf4ac2ba7555cd0404c8eb783b51dda80370a95cb9254f53439dea9722bce2b8a67c7240c934e0d5794d1dd6bc958708138b2622b6f2a6ccc_0",
            "is_ignored": false,
            "lines": "        response = requests.post(url, data = {'username': username, 'password': password})",
            "message": "There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"],
                "technology": ["requests"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/httpbrute.py",
        "start": {
            "col": 20,
            "line": 25,
            "offset": 629
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.requests.best-practice.use-timeout",
        "end": {
            "col": 91,
            "line": 25,
            "offset": 700
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "5c5856e3f4c8bc4931994f618f1927a56061e1da0cd79e24ac6b40c4925da88016a1f0c6bacd7df5e466b1805b5dca26d99d5f1091b4b394d47ce0d751090d17_0",
            "fix": "requests.post(url, data = {'username': username, 'password': password}, timeout=30)",
            "is_ignored": false,
            "lines": "        response = requests.post(url, data = {'username': username, 'password': password})",
            "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"],
                "technology": ["requests"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/httpbrute.py",
        "start": {
            "col": 20,
            "line": 25,
            "offset": 629
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 33,
            "line": 14,
            "offset": 373
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "bf7ec069044b0994164f50b440a9a2fc3f536a04279d05524137d69351ca5c82d492f8f44e3279c76f8a58c1502957d81c2f99046589dc7050e517db4fc5cf16_0",
            "is_ignored": false,
            "lines": "with open(\"/tmp/acme.key\", \"rb\") as key_file:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/rsa-decrypt.py",
        "start": {
            "col": 6,
            "line": 14,
            "offset": 346
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 33,
            "line": 14,
            "offset": 353
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "1ba30d26ff3903ace6445b36b33bb97135f36e9df27dabf8c409be1d7c1ba30e5b9dedbd3ec253b1da2d1db8ab92462d59b632cbdee77e6d16875b7dcc7b7bb2_0",
            "is_ignored": false,
            "lines": "with open(\"/tmp/acme.pub\", \"rb\") as key_file:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/rsa-encrypt.py",
        "start": {
            "col": 6,
            "line": 14,
            "offset": 326
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 33,
            "line": 26,
            "offset": 726
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "954073ff311a1ab6fd3111d8f6896fd3fb5e0da5c92015e18a38f565b8053995a7c2054e3fd11d6e6cb280bb2559ca7cc48fea84cbce717644cea08964e840f1_0",
            "is_ignored": false,
            "lines": "with open('/tmp/acme.key', 'wb') as out:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/rsa-keygen.py",
        "start": {
            "col": 6,
            "line": 26,
            "offset": 699
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 33,
            "line": 29,
            "offset": 795
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "954073ff311a1ab6fd3111d8f6896fd3fb5e0da5c92015e18a38f565b8053995a7c2054e3fd11d6e6cb280bb2559ca7cc48fea84cbce717644cea08964e840f1_1",
            "is_ignored": false,
            "lines": "with open('/tmp/acme.pub', 'wb') as out:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/rsa-keygen.py",
        "start": {
            "col": 6,
            "line": 29,
            "offset": 768
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 33,
            "line": 15,
            "offset": 413
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "287f220558e7c2b2092c0e503399418bbbd8bbfb189fcf7f7f72c0b98a28eab59758a2736f86773608fb1038be16ce4782c323a91df133d539b291bc7e159d23_0",
            "is_ignored": false,
            "lines": "with open(\"/tmp/acme.key\", \"rb\") as key_file:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/rsa-sign.py",
        "start": {
            "col": 6,
            "line": 15,
            "offset": 386
        }
    }, {
        "check_id": "var.www.html.intrucept.sast-backend.scans.semgrep-rules.python.lang.best-practice.hardcoded-tmp-path",
        "end": {
            "col": 33,
            "line": 16,
            "offset": 443
        },
        "extra": {
            "engine_kind": "OSS",
            "fingerprint": "eafbb9ddba20815b9f2e55ccbac7d132e97f292569499d1a2c02ae36bb819b505bdc810de87bcdb57a57a2613e981d4b5b96e31af8089ec9c75e5d8e6f78bb82_0",
            "is_ignored": false,
            "lines": "with open(\"/tmp/acme.pub\", \"rb\") as key_file:",
            "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.",
            "metadata": {
                "category": "best-practice",
                "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"],
                "technology": ["python"]
            },
            "metavars": {},
            "severity": "WARNING",
            "validation_state": "NO_VALIDATOR"
        },
        "path": "utils/rsa-verify.py",
        "start": {
            "col": 6,
            "line": 16,
            "offset": 416
        }
    }],
    "skipped_rules": [],
    "version": "1.57.0"
}